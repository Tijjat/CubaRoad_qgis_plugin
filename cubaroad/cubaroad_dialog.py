# -*- coding: utf-8 -*-
"""
/***************************************************************************
 cubaroadDialog
                                 A QGIS plugin
 This is an adaptation of the CubaRoad app for in qgis uses
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2024-03-27
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Cosylval
        email                : yoann.zenner@viacesi.fr
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from .CubaRoad_1_function import *

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(os.path.dirname(__file__), 'cubaroad_dialog_base.ui'))


class cubaroadDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self,iface=None, parent=None):
        """Constructor."""
        super(cubaroadDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        self.setWindowTitle("SylvaRoad")
#self.setWindowIcon(QIcon(':/plugins/sylvaccess_plugin/icon.png'))
        self.iface = iface
        global Cubaroad_UI
        Cubaroad_UI = self





###############################################################################
### Parameters
###############################################################################
"""
Dtm_file = "F:/SylvaLab/Projets/ONF/ONF_Desserte/Work/test_data/Zone test/Col_du_pre/Input/mnt.tif"
Road_file =  'F:/SylvaLab/Projets/ONF/ONF_Desserte/Work/test_data/Zone test/Col_du_pre/Res/Simu_51_Pl(2-10)_Pt(90-70)_Pen(60-80)_D(40)/New_Troncon_1.shp'
Res_dir =  "F:/SylvaLab/Projets/ONF/ONF_Desserte/Work/test_data/Zone test/Col_du_pre/Res/"

from_Sylvaroad = False  # True if Road_file from SylvaRoad / False if Road_file is not from SylvaRoad
step = 10               # [m] Step of analysis
max_exca_slope = 60     # [%] Cross slope beyond which 100% of material is excavated
min_exca_slope = 25     # [%] Inferior threshold of cross slope to start skidding the road axis
z_tolerance = 5         # [cm] tolerance to consider an intercetion with terrain 
xy_tolerance = 2        # [m] buffer around theoretical axis of the road 
                        # Put None to have xy_tolerance = 0.5*road_width
save_fig = False        # Save (True) or not (False) the ground profile of each calculation point  
save_shp = True         # Save (True) or not (False) the point of analyse and transects

Radius = 8              # [m] Radius of lace turns
angle_hairpin = 110     # [Â°] Min angle to be considered as lace turn
"""
################################################################################
### Script execution
################################################################################
if 'Wspace' not in locals() or 'Wspace' not in globals() :
    Wspace = Res_dir


#Run road designer 
apply_cubaroad(Dtm_file,Road_file,Res_dir,step,max_exca_slope,
               min_exca_slope,z_tolerance,xy_tolerance,save_fig,
               save_shp,Wspace,from_Sylvaroad,Radius,angle_hairpin)


